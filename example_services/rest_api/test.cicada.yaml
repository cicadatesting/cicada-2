description: Example test
version: 0.0
tests:
  - name: add_members
    description: add 100 new members
    runner: rest-runner
    # timeout
    # runnerCount (number of instances)
    # cycles (number of times to run each action and assert)
    # secondsBetweenCycles
    # secondsBetweenActions
    # secondsBetweenAsserts
    # actionDistributionStrategy
    # Each runner runs all actions independently (parallel)
    # Each runner is in a circular queue and gets an action (series)
    # assertDistributionStrategy
    # runIfFailedDependency
    actions:
      - type: POST
        # name (POST0 if not specified)
        executionsPerCycle: 100 # execute 100 times before moving onto next action
        # secondsBetweenExecutions
        params:
          url: "http://api:8080/members"
          body:
            name: jeff
  - name: update_names
    description: update names of new members
    runner: sql-runner
    dependencies:
      - add_members
    config:
      # NOTE: possibly add feature to render inline without template section
      connectionString: mysql+pymysql://root:admin@db:3306/mydb
    # Run each action, then check each assert. Repeat actions until all asserts have passed
    actions:
      - type: SQLQuery
        params:
          query: "delete from members where name='jeff2'"
      - type: SQLQuery
        template: >
          params:
            {% set ids = [] %}
            {% for member in state['add_members']['actions']['POST0']['results'] if member is not none %}
            {% do ids.append(member['body']['id']) %}
            {% endfor %}
            query: "update members set name='jeff2' where id in ({{ ids|join(',') }})"
        outputs:
          # Used to add state outside of runners 
          - name: index
            isGlobal: false # if global, store as state['index'] or something, else, state['update_names']['actions']['SQLQuery0']['index']
            template: >
              {% set index = state.get('update_names', {}).get('actions', {}).get('SQLQuery1', {}).get('outputs', {}).get('index') %}
              {% if index is none %}
                {% set index = 1 %}
              {% else %}
                {% set index = index + 1 %}
              {% endif %}
              value: {{ index }}
    asserts:
      - type: EqualsRows
        params:
          method: SQLQuery
          actionParams:
            query: "select count(*) as cnt from members where name='jeff2'"
          expected:
            rows:
              - cnt: 100
