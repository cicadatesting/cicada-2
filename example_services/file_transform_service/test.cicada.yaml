description: Example file transform test
version: 0.0
tests:
  - name: seed
    description: create test bucket
    # runner: s3-runner
    config:
      accessKeyID: EXAMPLE_ACCESS_KEY
      secretAccessKey: EXAMPLE_SECRET_KEY
      region: local
      endpointURL: http://s3:9000
    template: >
      volumes:
        - source: {{ getenv("WORKDIR") }}/test_data
          destination: /test_data
      actions:
        - type: cb
          params:
            bucketName: file-transform-service
        {% for tf in state["globals"]["transform_files"] %}
        - type: put
          params:
            sourcePath: /test_data/{{ tf }}.yaml
            destinationPath: s3://file-transform-service/{{ tf }}.yaml
        {% endfor %}
      image: {{ getenv("S3_RUNNER_IMAGE") }}

  - name: send-messages
    description: Send a message to service
    # runner: kafka-runner
    config:
      servers: kafka:9092
    template: >
      actions:
        {% for tf in state["globals"]["transform_files"] %}
        - type: Send
          params:
            topic: inbound-files
            messages:
              - key: {{ tf }}
        {% endfor %}
      asserts:
        {% for tf in state["globals"]["transform_files"] %}
        - type: FindMessage
          params:
            actionParams:
              topic: outbound-files
            expected:
              key: {{ tf }}
        {% endfor %}
      image: {{ getenv("KAFKA_RUNNER_IMAGE") }}
    dependencies:
      - seed

  - name: check-file-transform
    description: Check that file has been updated
    # runner: s3-runner
    config:
      accessKeyID: EXAMPLE_ACCESS_KEY
      secretAccessKey: EXAMPLE_SECRET_KEY
      region: local
      endpointURL: http://s3:9000
    template: >
      volumes:
        - source: {{ getenv("WORKDIR") }}/test_data
          destination: /test_data
      asserts:
        {% for tf in state["globals"]["transform_files"] %}
        - type: FilesEqual
          params:
            path: s3://file-transform-service/{{ tf }}.json
            expected: /test_data/{{ tf }}.json
        {% endfor %}
      image: {{ getenv("S3_RUNNER_IMAGE") }}
    dependencies:
      - send-messages

  - name: teardown
    description: Delete temporary S3 bucket
    # runner: s3-runner
    template: >
      image: {{ getenv("S3_RUNNER_IMAGE") }}
    config:
      accessKeyID: EXAMPLE_ACCESS_KEY
      secretAccessKey: EXAMPLE_SECRET_KEY
      region: local
      endpointURL: http://s3:9000
    actions:
      - type: rm
        params:
          path: s3://file-transform-service
          recursive: true
    dependencies:
      - check-file-transform
